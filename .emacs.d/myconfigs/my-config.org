* Super duper config

** General settings

*** Start-up behavior

**** Start-up screen

    #+begin_src elisp
      (setq inhibit-startup-screen t)
      (setq initial-buffer-choice
	(lambda ()
	 ;; (org-agenda-list)
	 ;; (get-buffer "*Org Agenda*")
      ))
      (setq visible-bell 1)
    #+end_src

    This is also called: (setq inhibit-splash-screen t)
    They are just aliases for each other.

*** UI Settings

**** Customize line numbers

    #+begin_src elisp
      (global-display-line-numbers-mode 0) ;; disable line numbers
      ;; (global-display-line-numbers-mode 1) ;; enable line numbers
      ;; (setq display-line-numbers-type 'relative)
    #+end_src

**** Hide UI bars

    Hide the menu bar, tool bar and scroll bar.
    Doing so early avoids ever having to see them - not even for a brief flash when starting Emacs.
    Toggle them on and off.
    e.g. ~M-x tool-bar-mode~

    #+begin_src elisp
      (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
      (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
      (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    #+end_src

**** Show column-numbers

  Show column position in addition to the line number.

  Syntax errors also mention column numbers.

    #+begin_src elisp
    (column-number-mode 1)
    #+end_src

**** visual line mode

    When Visual Line mode is enabled, ‘word-wrap’ is turned on in this buffer, and simple editing commands are redefined to act on visual lines, not logical lines.  See Info node ‘Visual Line Mode’ for details.

    When we edit prose, and the format requires paragraphs to fit on a single line of the output file. I want my editor to wrap properly at word boundaries.

    #+begin_src elisp
      (global-visual-line-mode t)
    #+end_src

**** Highlight current line

    As we switch back and forth between the editor and other things, we have to quickly remind ourselves where the cursor is positioned.

    Do this by highlighting the current line.

    #+begin_src elisp
      (global-hl-line-mode t)
    #+end_src

**** Enable word wrap

    This enables wrapping but kill-line still kills the whole line.

    #+begin_src elisp
      (setq-default word-wrap t)
    #+end_src

**** Change how dired looks

      Make dired less verbose.
      You can toggle this on and off using "("

      #+begin_src elisp
	;; (dired-hide-details-mode 1)
      #+end_src

**** Change the behaviour of org-agenda-goto to open org-file in a new frame

      Reference: https://stackoverflow.com/questions/56628735/how-to-change-the-behaviour-of-org-agenda-goto-to-open-org-file-in-a-new-frame

      You can use advice to temporarily redefine switch-to-buffer-other-window using cl-letf. Assuming your on at least emacs 25.1 you can use define-advice, eg.

      (define-advice org-agenda-goto (:around (orig-fn &rest args) "new-frame")
	(cl-letf (((symbol-function 'switch-to-buffer-other-window)
		   (symbol-function 'switch-to-buffer-other-frame)))
	  (apply orig-fn args)))
      In the advice orig-fn is a placeholder to org-agenda-goto. Alternatively, you could temporarily override display-buffer's function (there are a number of options you could use here -- see help for display-buffer), eg.

      (define-advice org-agenda-goto (:around (orig-fn &rest args) "new-frame")
	(let ((display-buffer-overriding-action '(display-buffer-pop-up-frame)))
	  (apply orig-fn args)))

      #+begin_src elisp
      (define-advice org-agenda-goto (:around (org-agenda-goto &rest args) "new-frame")
	(cl-letf (((symbol-function 'switch-to-buffer-other-window)
		   (symbol-function 'switch-to-buffer-other-frame)))
	  (apply org-agenda-goto args)))
      #+end_src

** Packages

*** avy

    https://github.com/abo-abo/avy

    #+begin_src elisp
      (use-package avy
	:config
	  (global-set-key (kbd "C-c jc1") 'avy-goto-char)
	  (global-set-key (kbd "C-c jc2") 'avy-goto-char-2)
	  (global-set-key (kbd "C-c jl") 'avy-goto-line)
	  ;; (global-set-key (kbd "C-c jl") 'avy-goto-line-above)
	  (global-set-key (kbd "C-c jw") 'avy-goto-word-1)
	  (global-set-key (kbd "C-c ja") 'avy-goto-word-0)
	  ;;(global-set-key (kbd "C-c at") 'avy-goto-char-timer)
	  :ensure t)
    #+end_src

*** beacon

    This applies a beacon effect to the highlighted line

    #+begin_src elisp
      (use-package beacon
	 :ensure t
	 :config
	 (beacon-mode 1))
    #+end_src

*** cl-lib

    #+begin_src elisp
      (use-package cl-lib
	:ensure t)
    #+end_src

*** dired-sidebar

    #+begin_src elisp
     (use-package dired-sidebar
       :ensure t
       :commands (dired-sidebar-toggle-sidebar))
    #+end_src

*** emacs-calfw

    https://gitnhub.com/kiwanami/emacs-calfw

    #+begin_src elisp
    ;; (require 'calfw)
    ;; (require 'calfw-org)
    (use-package calfw
	:ensure t
    )
    (use-package calfw-org
	:ensure t
    )

    (defun my-calfw-view ()
      "Launch org-timeblock and org-timeblock-toggle-timeblock-list simulataneously"
      (interactive)
      (cfw:open-org-calendar)
    )
    #+end_src

    Then, ~M-x cfw:open-org-calendar~

*** emacs-neotree

  This is an emacs port of vim's NERDTree.

  https://github.com/jaypei/emacs-neotree?tab=readme-ov-file

  #+begin_src elisp
  ;; (use-package neotree
  ;;   :ensure t
  ;; )
  #+end_src

  Use dired-sidebar instead.

  This is not showing the tree view for the directory in which the file exists. It is always showing the same tree view that it initially launches - even though we open files from a different directory.

*** evil-mode

    #+begin_src elisp
      (use-package evil
	:config
	  (evil-mode 0)
	:ensure t)
    #+end_src

*** flex-autopair

    The alternative to using this is ~(show-paren-mode 1)~

    https://github.com/uk-ar/flex-autopair

    #+begin_src elisp
      (use-package flex-autopair
	:ensure t
	:config
	  (flex-autopair-mode 1)
      )
    #+end_src

*** git-gutter

  https://github.com/emacsorphanage/git-gutter/tree/master

    #+begin_src elisp
      (use-package git-gutter
	:ensure t
	:config
	  (global-git-gutter-mode +1)
      )
    #+end_src

*** ledger-mode

    https://github.com/ledger/ledger-mode

    Helpful features:

    1. Sorting entries in a ledger file.
    1. Aligning prices, completing accounts and generating upcoming transactions are other features

    #+begin_src elisp
      (use-package ledger-mode
	  :ensure t
      )
    #+end_src

*** magit

    (When this gets reasonably big, pull this section into a separate file of its own.)
    To launch magit when you are editing a file that is in a git repository, ~Ctrl c g~

    To see the diff version of a file in the magit status page, with the mouse on that file, hit ~tab~. To close the diff view, hit tab again.

    After staging all the files we want to commit, to commit them, hit ~Ctrl c Ctrl c~
    Enter a commit message and hit ~Ctrl c Ctrl c~

    After you have a commit, to push it to the remote repository, hit ~P~. It gives you options about where to push it and some other details.

    https://magit.vc/manual/magit/Resolving-Conflicts.html

    #+begin_src elisp
      (use-package magit
		:ensure t
		:config
			(defadvice magit-status (around magit-fullscreen activate)
		  (window-configuration-to-register :magit-fullscreen)
		  ad-do-it
		  (delete-other-windows))

		(defadvice magit-mode-quit-window (after magit-restore-screen activate)
		  "Restores the previous window configuration and kills the magit buffer"
		  (jump-to-register :magit-fullscreen))

		(define-key magit-status-mode-map (kbd "q") 'magit-mode-quit-window)
      )
    #+end_src

    The config is for this:

    Full screen magit-status.

    This code makes magit-status run alone in the frame, and then restores the old window configuration when you quit out of magit.
    No more juggling windows after commiting. It's magit bliss.
    After you are done with magit, do M-x quit-window

    #+begin_src emacs-lisp
      (use-package magit
		:ensure t
		:config
			(defadvice magit-status (around magit-fullscreen activate)
		  (window-configuration-to-register :magit-fullscreen)
		  ad-do-it
		  (delete-other-windows))

		(defadvice magit-mode-quit-window (after magit-restore-screen activate)
		  "Restores the previous window configuration and kills the magit buffer"
		  (jump-to-register :magit-fullscreen))

		(define-key magit-status-mode-map (kbd "q") 'magit-mode-quit-window)
      )
    #+end_src

*** multiple cursors

    Install multiple-cursors and (the dependent package cl-lib) first.
    If you want to start multiple cursors at a word (or a tag or anything) that exists on multiple lines (the lines do not have to be continuous),
    mark the word (using Ctrl space) and then do Ctrl Shift . (dot).
    This will start multiple cursors on the multiple lines.
    After that, you can do normal operations like delete, insert, cut, copy, etc.
    There are a lot of features that can be done using this.
    This needs a lot more research.
    But this should be a good starting point to insert/delete text on multiple lines based on certain common words in multiple lines.0

    https://github.com/magnars/multiple-cursors.el

    #+begin_src elisp
      (use-package multiple-cursors
	:config
	(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
	(global-set-key (kbd "C->") 'mc/mark-next-like-this)
	(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
	(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
	:ensure t)
    #+end_src

*** nov mode

  To read epub files in emacs

  https://depp.brause.cc/nov.el/

  Prerequisite: nov.el

  Installation
  1. M-x list-packages
  2. Search for nov
  3. Install it

  Navigation in the epub in emacs:
  1. Use the arrow keys or Page-Up/Page-Down to move through the content.
  1. t takes you to the table of contents.
  1. n and p navigate to the next and previous chapters, respectively.
  1. q exits the ebook reader.

    #+begin_src elisp
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    #+end_src

*** projectile

    https://github.com/bbatsov/projectile
    https://docs.projectile.mx/projectile/index.html

    #+begin_src elisp
      (use-package projectile
	:config
	(projectile-mode +1)
	(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
	(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
	:ensure t)
    #+end_src

*** smartscan

    https://github.com/mickeynp/smart-scan

    https://www.masteringemacs.org/article/smart-scan-jump-symbols-buffer

    #+begin_src elisp
      (use-package smartscan
	  :ensure t
	  :config
	 (global-smartscan-mode 1)
      )
    #+end_src

*** string-inflection

    #+begin_src elisp
    (use-package string-inflection
	:ensure t
    )
    #+end_src

*** switch-window

    #+begin_src elisp
    (use-package switch-window
	:ensure t
    )
    #+end_src

*** try packages without installing them

    #+begin_src elisp
      (use-package try
	  :ensure t
      )
    #+end_src

    #+RESULTS:

*** which-key

    #+begin_src elisp
      (use-package which-key
	:config
	  (setq which-key-idle-delay 0.3)
	  (setq which-key-popup-type 'frame)
	  (which-key-mode)
	  (which-key-setup-minibuffer)
	  (set-face-attribute 'which-key-local-map-description-face nil
	     :weight 'bold)
	  :ensure t)
    #+end_src

*** yasnippet

    https://github.com/joaotavora/yasnippet

    If you don't remember all the shortcuts to various available snippets, use M-x yas-describe-tables to view the available snippets from the documentation.

    To study the current snippets, I suggest that you use M-x yas-describe-tables, which will show a table representation of all the snippets that are available in the current mode.

    #+begin_src elisp
      (add-to-list 'load-path
	"~/.emacs.d/plugins/yasnippet")

      (use-package yasnippet
	:ensure t
	:config
	  (use-package yasnippet-snippets
	    :ensure t)

	(yas-reload-all)
	(yas-global-mode 1)
      )
    #+end_src

    To look at the list of available snippets, use emacs ~describe~ function.

** Custom snippets

*** auto-refresh

    How to have Emacs auto-refresh all buffers when files have changed on disk?

    #+begin_src elisp
      (global-auto-revert-mode t)
    #+end_src

    Auto refresh dired buffers, but be quiet about it.
    The last line makes sure that you are not alerted every time this happens.

    #+begin_src elisp
      (setq global-auto-revert-non-file-buffers t)
      (setq auto-revert-verbose nil)
    #+end_src

*** Navigation in dired

    In dired, M-> and M- never take me where I want to go.
    With this code, instead of taking me to the very beginning or very end, they now take me to the first or last file.
    #+begin_src elisp
      (defun dired-back-to-top ()
	(interactive)
	(beginning-of-buffer)
	(dired-next-line 4))
      (define-key dired-mode-map
	(vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
      (defun dired-jump-to-bottom ()
	(interactive)
	(end-of-buffer)
	(dired-next-line -1))
      (define-key dired-mode-map
	(vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
    #+end_src

*** Join lines

     With point anywhere on the first line, I simply press M-j multiple times to pull the lines up.

     #+begin_src elisp
       (global-set-key (kbd "M-j")
	    (lambda ()
		  (interactive)
		  (join-line -1)))
     #+end_src

*** Delete current buffer

    ~C-x C-k~ file begone!

    I like the feel between C-x k to kill the buffer and C-x C-k to kill the file. Release ctrl to kill it a little, hold to kill it a lot.

    #+begin_src elisp
      (defun delete-current-buffer-file ()
      "Removes file connected to current buffer and kills buffer."
      (interactive)
      (let ((filename (buffer-file-name))
	    (buffer (current-buffer))
	    (name (buffer-name)))
	(if (not (and filename (file-exists-p filename)))
	    (ido-kill-buffer)
	  (when (yes-or-no-p "Are you sure you want to remove this file? ")
	    (delete-file filename)
	    (kill-buffer buffer)
	    (message "File '%s' successfully removed" filename)))))

      (global-set-key (kbd "C-x C-k") 'delete-current-buffer-file)
    #+end_src

*** Rename current buffer

    You don't have to type the name out from scratch - but get the current name to modify.

    #+begin_src elisp
      (defun rename-current-buffer-file ()
	"Renames current buffer and file it is visiting."
	(interactive)
	(let ((name (buffer-name))
	      (filename (buffer-file-name)))
	  (if (not (and filename (file-exists-p filename)))
	      (error "Buffer '%s' is not visiting a file!" name)
	    (let ((new-name (read-file-name "New name: " filename)))
	      (if (get-buffer new-name)
		  (error "A buffer named '%s' already exists!" new-name)
		(rename-file filename new-name 1)
		(rename-buffer new-name)
		(set-visited-file-name new-name)
		(set-buffer-modified-p nil)
		(message "File '%s' successfully renamed to '%s'"
			 name (file-name-nondirectory new-name)))))))

      (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
    #+end_src

*** Copy file path to clipboard in Emacs

    You don't have to type the name out from scratch - but get the current name to modify.

    #+begin_src elisp
    (defun my-put-file-name-on-clipboard ()
      "Put the current file name on the clipboard"
      (interactive)
      (let ((filename (if (equal major-mode 'dired-mode)
			  default-directory
			(buffer-file-name))))
	(when filename
	  (with-temp-buffer
	    (insert filename)
	    (clipboard-kill-region (point-min) (point-max)))
	  (message filename))))
    #+end_src

*** Open new lines above or below the current line

    With these shortcuts you can open a new line above or below the current one, even if the cursor is midsentence.

    These are alternatives to using ~o~ and ~O~ in evil-mode.

    #+begin_src elisp
      (defun open-line-below ()
	(interactive)
	(end-of-line)
	(newline)
	(indent-for-tab-command))

      (defun open-line-above ()
	(interactive)
	(beginning-of-line)
	(newline)
	(forward-line -1)
	(indent-for-tab-command))

      (global-set-key (kbd "<C-return>") 'open-line-below)
      (global-set-key (kbd "<C-S-return>") 'open-line-above)
    #+end_src

*** Move around in a buffer quickly

     Are Ctrl-n and Ctrl-p too slow for you?
     Move in a buffer more quickly.

     These are not very helpful if you are using evil-mode.

     #+begin_src elisp
       (global-set-key (kbd "C-S-n")
		(lambda ()
		  (interactive)
		  (ignore-errors (next-line 5))))

       (global-set-key (kbd "C-S-p")
		       (lambda ()
			 (interactive)
			 (ignore-errors (previous-line 5))))

       (global-set-key (kbd "C-S-f")
		       (lambda ()
			 (interactive)
			 (ignore-errors (forward-char 5))))

       (global-set-key (kbd "C-S-b")
		       (lambda ()
			 (interactive)
			 (ignore-errors (backward-char 5))))
     #+end_src

*** Move around in a buffer quickly

     https://protesilaos.com/codelog/2023-06-10-emacs-search-replace-basics/

     Display a counter showing the number of the current and the other matches.  Place it before the prompt, though it can be after it.

     #+begin_src elisp
     (setq isearch-lazy-count t)
     (setq lazy-count-prefix-format "(%s/%s) ")
     (setq lazy-count-suffix-format nil)
     #+end_src

     Make regular Isearch interpret the empty space as a regular expression that matches any character between the words you give it.

     #+begin_src elisp
     (setq search-whitespace-regexp ".*?")
     #+end_src

     Install the `wgrep' package.  It makes the grep buffers editable.

     Install the `consult' package.  It provides lots of useful commands that enhance the minibuffer experience of Emacs (e.g. for searching lines/heading).

     Install the `embark' package.  It allows you to perform context-sensitive actions, using a prompt and then a key/action selection interface.

*** Disable arrow keys

      Instead of adding the keys to the global map, we create a minor mode and add the keys to the ~emulation-mode-map-alist~ which takes precedents over minor and major mode maps.

      You can install the ~use-package~ package available from Melpa and make use of ~bind-key*~ or ~bind-keys*~ macro that's part of the ~bind-key~ package that ships with ~use-package~.

      #+begin_src elisp
      (define-minor-mode my-override-mode
	"Overrides all major and minor mode keys" t)

      (defvar my-override-map (make-sparse-keymap "my-override-map")
	"Override all major and minor mode keys")

      (add-to-list 'emulation-mode-map-alists
	`((my-override-mode . ,my-override-map)))

      (define-key my-override-map (kbd "<left>")
	(lambda ()
	  (interactive)
	  (message "Use Vim keys: h for Left")))

      (define-key my-override-map (kbd "<right>")
	(lambda ()
	  (interactive)
	  (message "Use Vim keys: l for Right")))

      (define-key my-override-map (kbd "<up>")
	(lambda ()
	  (interactive)
	  (message "Use Vim keys: k for Up")))

      (define-key my-override-map (kbd "<down>")
	(lambda ()
	  (interactive)
	  (message "Use Vim keys: j for Down")))
      #+end_src

Evil mode provides it's own emulation map. So you need to add this line

     #+begin_src elisp
     (evil-make-intercept-map my-override-map)
     #+end_src

*** Toggle Window Split

  Toggle between horizontal and vertical window splits.

  #+begin_src emacs-lisp
  (defun my-toggle-window-split ()
    (interactive)
      (if (= (count-windows) 2)
	  (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

  (define-key ctl-x-4-map "t" 'toggle-window-split)
  #+end_src

*** Customize org-link-frame-setup

  For help, ~describe-variable org-link-frame-setup~

  https://orgmode.org/manual/Handling-Links.html

  For FILE, use any of
    ‘find-file’ -- This one opens files in the current window (over the previous file that you are in)
    ‘find-file-other-window’ -- This one opens files in the same window - to the right or to the bottom
    ‘find-file-other-frame’ -- This one opens files in an entirely new frame

   #+begin_src emacs-lisp
   (setq org-link-frame-setup
      '((vm . vm-visit-folder-other-frame)
	(vm-imap . vm-visit-imap-folder-other-frame)
	(gnus . org-gnus-no-new-news)
	(file . find-file-other-frame) ;; Opens files in the current window
	(wl . wl-other-frame)))
   #+end_src
