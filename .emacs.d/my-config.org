* Super duper config

** General settings


*** Start-up behavior

***** Start-up screen

    #+begin_src emacs-lisp
      (setq inhibit-startup-screen t)
    #+end_src

***** visual line mode

    #+begin_src emacs-lisp
      (global-visual-line-mode t)
    #+end_src    

*** UI Settings
   
***** Customize line numbers

    #+begin_src emacs-lisp
      (global-display-line-numbers-mode)
      (setq display-line-numbers-type 'relative)
    #+end_src

***** Hide UI bars

    Hide the menu bar, tool bar and scroll bar. Doing so early avoids ever having to see them - not even for a brief flash when starting Emacs.
    Toggle them on and off using M-x tool-bar-mode etc.
    #+begin_src emacs-lisp
      (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
      (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
      (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
    #+end_src

***** Enable word wrap

    This enables wrapping but kill-line still kills the whole line.
    
    #+begin_src emacs-lisp
      (setq-default word-wrap t)
    #+end_src

***** Highlight currnet line

    This highlights the current line in the buffer
    
    #+begin_src emacs-lisp
      (global-hl-line-mode t)
    #+end_src

***** Change how dired looks

      Make dired less verbose.
      You can toggle this on and off using "("

      #+begin_src emacs-lisp
	;; (dired-hide-details-mode 1)
      #+end_src

*** Custom snippets
***** auto-refresh

    How to have Emacs auto-refresh all buffers when files have changed on disk?
    
    #+begin_src emacs-lisp
      (global-auto-revert-mode t)
    #+end_src

    Auto refresh dired buffers, but be quiet about it.
    The last line makes sure that you are not alerted every time this happens.

    #+begin_src emacs-lisp
      (setq global-auto-revert-non-file-buffers t)
      (setq auto-revert-verbose nil)
    #+end_src
***** Navigation in dired

    In dired, M-> and M- never take me where I want to go.
    With this code, instead of taking me to the very beginning or very end, they now take me to the first or last file.
    #+begin_src emacs-lisp
      (defun dired-back-to-top ()
        (interactive)
        (beginning-of-buffer)
        (dired-next-line 4))
      (define-key dired-mode-map
        (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
      (defun dired-jump-to-bottom ()
        (interactive)
        (end-of-buffer)
        (dired-next-line -1))
      (define-key dired-mode-map
        (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)  
    #+end_src
***** Join lines

     With point anywhere on the first line, I simply press M-j multiple times to pull the lines up.

     #+begin_src emacs-lisp
       (global-set-key (kbd "M-j")
            (lambda ()
                  (interactive)
                  (join-line -1)))
     #+end_src
***** Delete current buffer

    C-x C-k: file begone!

    I like the feel between C-x k to kill the buffer and C-x C-k to kill the file. Release ctrl to kill it a little, hold to kill it a lot.

    #+begin_src emacs-lisp
      (defun delete-current-buffer-file ()
      "Removes file connected to current buffer and kills buffer."
      (interactive)
      (let ((filename (buffer-file-name))
            (buffer (current-buffer))
            (name (buffer-name)))
        (if (not (and filename (file-exists-p filename)))
            (ido-kill-buffer)
          (when (yes-or-no-p "Are you sure you want to remove this file? ")
            (delete-file filename)
            (kill-buffer buffer)
            (message "File '%s' successfully removed" filename)))))

      (global-set-key (kbd "C-x C-k") 'delete-current-buffer-file)
    #+end_src
***** Rename current buffer    

    You don't have to type the name out from scratch - but get the current name to modify.

    #+begin_src emacs-lisp
      (defun rename-current-buffer-file ()
        "Renames current buffer and file it is visiting."
        (interactive)
        (let ((name (buffer-name))
              (filename (buffer-file-name)))
          (if (not (and filename (file-exists-p filename)))
              (error "Buffer '%s' is not visiting a file!" name)
            (let ((new-name (read-file-name "New name: " filename)))
              (if (get-buffer new-name)
                  (error "A buffer named '%s' already exists!" new-name)
                (rename-file filename new-name 1)
                (rename-buffer new-name)
                (set-visited-file-name new-name)
                (set-buffer-modified-p nil)
                (message "File '%s' successfully renamed to '%s'"
                         name (file-name-nondirectory new-name)))))))

      (global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
    #+end_src
***** Open new lines above or below the current line

    With these shortcuts you can open a new line above or below the current one, even if the cursor is midsentence.

    #+begin_src emacs-lisp
      (defun open-line-below ()
        (interactive)
        (end-of-line)
        (newline)
        (indent-for-tab-command))

      (defun open-line-above ()
        (interactive)
        (beginning-of-line)
        (newline)
        (forward-line -1)
        (indent-for-tab-command))
      
      (global-set-key (kbd "<C-return>") 'open-line-below)
      (global-set-key (kbd "<C-S-return>") 'open-line-above)
    #+end_src
***** Move around in a buffer quickly

     Are Ctrl-n and Ctrl-p too slow for you?
     Move in a buffer more quickly.

     #+begin_src emacs-lisp
       (global-set-key (kbd "C-S-n")
                (lambda ()
                  (interactive)
                  (ignore-errors (next-line 5))))

       (global-set-key (kbd "C-S-p")
                       (lambda ()
                         (interactive)
                         (ignore-errors (previous-line 5))))
       
       (global-set-key (kbd "C-S-f")
                       (lambda ()
                         (interactive)
                         (ignore-errors (forward-char 5))))
       
       (global-set-key (kbd "C-S-b")
                       (lambda ()
                         (interactive)
                         (ignore-errors (backward-char 5))))
     #+end_src


** Packages

***** auto-complete    

    Not using auto-complete for now because I am using Company instead.
    
    #+begin_src emacs-lisp
      ;;(use-package auto-complete
      ;;  :ensure t
      ;;  :config 
      ;;  (ac-config-default)
      ;;  )
    #+end_src

***** avy

    #+begin_src emacs-lisp
      (use-package avy
        :config 
          (global-set-key (kbd "C-c jc1") 'avy-goto-char)
          (global-set-key (kbd "C-c jc2") 'avy-goto-char-2)
          (global-set-key (kbd "C-c jl") 'avy-goto-line)
          (global-set-key (kbd "C-c jw") 'avy-goto-word-1)
          (global-set-key (kbd "C-c ja") 'avy-goto-word-0)
          ;;(global-set-key (kbd "C-c at") 'avy-goto-char-timer)
          :ensure t)
    #+end_src

***** beacon

    This applies a beacon effect to the highlighted line
    
    #+begin_src emacs-lisp
      (use-package beacon 
         :ensure t
         :config
         (beacon-mode 1))
    #+end_src

***** cl-lib

    #+begin_src emacs-lisp
      (use-package cl-lib
        :ensure t)
    #+end_src

***** company

    http://company-mode.github.io/
    
    #+begin_src emacs-lisp
      (use-package company
        :ensure t
        :init
        (add-hook 'after-init-hook 'global-company-mode)
        (setq company-dabbrev-downcase nil)
        (setq company-dabbrev-ignore-case nil)
      )
    #+end_src

***** dracula theme

    Use t in (load-theme 'dracula t) to make sure that it wouldn't ask for confirmation at start-up.
    
    #+begin_src emacs-lisp
      (use-package dracula-theme
         :config
         (load-theme 'dracula t)
         :ensure t)
    #+end_src

***** flex-autopair

    #+begin_src emacs-lisp
      (use-package flex-autopair
        :ensure t
        :config
          (flex-autopair-mode 1)
      )
    #+end_src

***** flycheck

    https://github.com/flycheck/flycheck

    #+begin_src emacs-lisp
      (use-package flycheck
        :ensure t)
    #+end_src

***** git-gutter

    #+begin_src emacs-lisp
      (use-package git-gutter
        :ensure t
        :config
          (global-git-gutter-mode +1)
      )
    #+end_src
      
***** haskell-mode

    #+begin_src emacs-lisp
      (use-package haskell-mode
        :ensure t)
    #+end_src

***** helm

    #+begin_src emacs-lisp
      (use-package helm
        :init
          (require 'helm-config)
          (setq helm-split-window-in-side-p t
                helm-move-to-line-cycle-in-source t)
        :config 
          (helm-mode 1) ;; Most of Emacs prompts become helm-enabled
          (helm-autoresize-mode 1) ;; Helm resizes according to the number of candidates
          (global-set-key (kbd "C-x b") 'helm-buffers-list) ;; List buffers ( Emacs way )
          (global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Finding files with Helm
          (global-set-key (kbd "C-s") 'helm-occur)  ;; Replaces the default isearch keybinding
          (global-set-key (kbd "C-h a") 'helm-apropos)  ;; Helmized apropos interface
          (global-set-key (kbd "M-x") 'helm-M-x)  ;; Improved M-x menu
          (global-set-key (kbd "M-y") 'helm-show-kill-ring)  ;; Show kill ring, pick something to paste
        :ensure t)
    #+end_src

***** hydra

    #+begin_src emacs-lisp
      ;; (global-set-key (kbd "M-g M-g") 'hydra-git-gutter/body)
      ;;
      ;; (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
      ;;                             :hint nil)
      ;;   "
      ;;   Git gutter:
      ;;     _j_: next hunk        _s_tage hunk     _q_uit
      ;;     _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
      ;;     ^ ^                   _p_opup hunk
      ;;     _h_: first hunk
      ;;     _l_: last hunk        set start _R_evision
      ;;   "
      ;;     ("j" git-gutter:next-hunk)
      ;;     ("k" git-gutter:previous-hunk)
      ;;     ("h" (progn (goto-char (point-min))
      ;;                 (git-gutter:next-hunk 1)))
      ;;     ("l" (progn (goto-char (point-min))
      ;;                 (git-gutter:previous-hunk 1)))
      ;;     ("s" git-gutter:stage-hunk)
      ;;     ("r" git-gutter:revert-hunk)
      ;;     ("p" git-gutter:popup-hunk)
      ;;     ("R" git-gutter:set-start-revision)
      ;;     ("q" nil :color blue)
      ;;     ("Q" (progn (git-gutter-mode -1)
      ;;                 ;; git-gutter-fringe doesn't seem to
      ;;                 ;; clear the markup right away
      ;;                 (sit-for 0.1)
      ;;                 (git-gutter:clear))
      ;;          :color blue))
      ;;
      ;;  (use-package hydra
      ;;    :ensure t)
    #+end_src

***** lsp-java

    Its a good idea to make sure that Java 11 is installed before trying to use lsp-java. Getting it to work with Java 8 wasn't successful.
    
    #+begin_src emacs-lisp
      ;;(use-package lsp-java
      ;;  :config (add-hook 'java-mode-hook 'lsp)
      ;;  :ensure t
      ;;)
    #+end_src
    
    #+begin_src emacs-lisp
      ;;(use-package dap-mode
      ;;  :after lsp-mode
      ;;  :config (dap-auto-configure-mode)
      ;;  :ensure t
      ;;)
    #+end_src

    #+begin_src emacs-lisp
      ;;(use-package dap-java
      ;;  :ensure t
      ;;)
    #+end_src
    
    #+begin_src emacs-lisp
      ;;(use-package helm-lsp
      ;;  :ensure t
      ;;)
    #+end_src
    
    #+begin_src emacs-lisp
      ;;(use-package lsp-treemacs
      ;;  :ensure t
      ;;)
    #+end_src

***** lsp-mode

    #+begin_src emacs-lisp
      ;;(use-package lsp-mode
      ;;  :hook ((lsp-mode . lsp-enable-which-key-integration))
      ;;  :config (setq lsp-completion-enable-additional-text-edit nil)
      ;;  :ensure t
      ;;)
    #+end_src

***** lsp-ui

    #+begin_src emacs-lisp
      ;;(use-package lsp-ui
      ;;  :ensure t)
    #+end_src

***** magit

    #+begin_src emacs-lisp
      (use-package magit
		:ensure t
		:config
			(defadvice magit-status (around magit-fullscreen activate)
		  (window-configuration-to-register :magit-fullscreen)
		  ad-do-it
		  (delete-other-windows))

		(defadvice magit-mode-quit-window (after magit-restore-screen activate)
		  "Restores the previous window configuration and kills the magit buffer"
		  (jump-to-register :magit-fullscreen))

		(define-key magit-status-mode-map (kbd "q") 'magit-mode-quit-window)	
      )
    #+end_src

    The config is for this:
    
    Full screen magit-status.
    This code makes magit-status run alone in the frame, and then restores the old window configuration when you quit out of magit.
    No more juggling windows after commiting. It's magit#+begin_src emacs-lisp
    
***** multiple cursors

    #+begin_src emacs-lisp
      (use-package multiple-cursors
        :config
        (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
        (global-set-key (kbd "C->") 'mc/mark-next-like-this)
        (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
        (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
        :ensure t)
    #+end_src
    
***** org

    #+begin_src emacs-lisp
      (use-package org
	:ensure t
	:config
	  (setq org-log-done 'time) ;;keep track of when a certain TODO item was marked as done.
      )
      (org-babel-do-load-languages
        'org-babel-load-languages '(
	   (shell . t)
	)
      )
    #+end_src

    Agenda Views - First, you need to add your Org file to your Org agenda by using the command C-c [. Then, type Meta-x org-agenda to be presented with options for different views.
      
    How can I show the Org-mode agenda on Emacs start-up
    #+begin_src emacs-lisp
      (add-hook 'after-init-hook 'org-agenda-list)
    #+end_src

***** projectile

    https://github.com/bbatsov/projectile
    https://docs.projectile.mx/projectile/index.html
    
    #+begin_src emacs-lisp
      (use-package projectile
        :config
        (projectile-mode +1)
        (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        :ensure t)
    #+end_src

***** treemacs

    #+begin_src emacs-lisp
      (use-package treemacs
        :ensure t
        :defer t
        :init
        (with-eval-after-load 'winum
          (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
        :config
        (progn
          (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
                treemacs-deferred-git-apply-delay      0.5
                treemacs-directory-name-transformer    #'identity
                treemacs-display-in-side-window        t
                treemacs-eldoc-display                 t
                treemacs-file-event-delay              5000
                treemacs-file-extension-regex          treemacs-last-period-regex-value
                treemacs-file-follow-delay             0.2
                treemacs-file-name-transformer         #'identity
                treemacs-follow-after-init             t
                treemacs-git-command-pipe              ""
                treemacs-goto-tag-strategy             'refetch-index
                treemacs-indentation                   2
                treemacs-indentation-string            " "
                treemacs-is-never-other-window         nil
                treemacs-max-git-entries               5000
                treemacs-missing-project-action        'ask
                treemacs-move-forward-on-expand        nil
                treemacs-no-png-images                 nil
                treemacs-no-delete-other-windows       t
                treemacs-project-follow-cleanup        nil
                treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
                treemacs-position                      'left
                treemacs-read-string-input             'from-child-frame
                treemacs-recenter-distance             0.1
                treemacs-recenter-after-file-follow    nil
                treemacs-recenter-after-tag-follow     nil
                treemacs-recenter-after-project-jump   'always
                treemacs-recenter-after-project-expand 'on-distance
                treemacs-show-cursor                   nil
                treemacs-show-hidden-files             t
                treemacs-silent-filewatch              nil
                treemacs-silent-refresh                nil
                treemacs-sorting                       'alphabetic-asc
                treemacs-space-between-root-nodes      t
                treemacs-tag-follow-cleanup            t
                treemacs-tag-follow-delay              1.5
                treemacs-user-mode-line-format         nil
                treemacs-user-header-line-format       nil
                treemacs-width                         40
                treemacs-workspace-switch-cleanup      nil)
      
          ;; The default width and height of the icons is 22 pixels. If you are
          ;; using a Hi-DPI display, uncomment this to double the icon size.
          ;;(treemacs-resize-icons 44)
      
          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (treemacs-fringe-indicator-mode 'always)
          (pcase (cons (not (null (executable-find "git")))
                       (not (null treemacs-python-executable)))
            (`(t . t)
             (treemacs-git-mode 'deferred))
            (`(t . _)
             (treemacs-git-mode 'simple))))
        :bind
        (:map global-map
              ("M-0"       . treemacs-select-window)
              ("C-x t 1"   . treemacs-delete-other-windows)
              ("C-x t t"   . treemacs)
              ("C-x t B"   . treemacs-bookmark)
              ("C-x t C-t" . treemacs-find-file)
              ("C-x t M-t" . treemacs-find-tag)))    
    #+end_src

***** treemacs-icons-dired

    #+begin_src emacs-lisp
      (use-package treemacs-icons-dired
        :after (treemacs dired)
        :ensure t
        :config (treemacs-icons-dired-mode))
    #+end_src

***** treemacs-magit

    #+begin_src emacs-lisp
      (use-package treemacs-magit
        :after (treemacs magit)
        :ensure t)
    #+end_src

***** evil-mode

    #+begin_src emacs-lisp
      (use-package evil
        :config 
          (evil-mode 1)
        :ensure t)
    #+end_src

***** treemacs-projectile    

    #+begin_src emacs-lisp
      (use-package treemacs-projectile
        :after (treemacs projectile)
        :ensure t)
    #+end_src

***** try

    #+begin_src emacs-lisp
      (use-package try
        :ensure t)
    #+end_src

***** which-key

    #+begin_src emacs-lisp
      (use-package which-key
        :config 
          (setq which-key-idle-delay 0.3)
          (setq which-key-popup-type 'frame)
          (which-key-mode)
          (which-key-setup-minibuffer)
          (set-face-attribute 'which-key-local-map-description-face nil 
             :weight 'bold)
          :ensure t)
    #+end_src

***** yasnippet

    If you don't remember all the shortcuts to various available snippets, use M-x yas-describe-tables to view the available snippets from the documentation.
    
    #+begin_src emacs-lisp
      (add-to-list 'load-path
                    "~/.emacs.d/plugins/yasnippet")
      (use-package yasnippet
        :ensure t
        :config
          (use-package yasnippet-snippets
            :ensure t)
        (yas-reload-all) 
        (yas-global-mode 1)
      )
    #+end_src

***** Table of contents

    #+begin_src emacs-lisp
        (use-package toc-org
          :ensure t
        )

	(if (require 'toc-org nil t)
	(progn
	  (add-hook 'org-mode-hook 'toc-org-mode)

	  ;; enable in markdown, too
	  ;;(add-hook 'markdown-mode-hook 'toc-org-mode)
	  ;;(define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point)
      )
      (warn "toc-org not found"))
    #+end_src

    1. How to insert table of contents in an org file?
    1. Put a heading in the document. After the line with the heading, add a ~TOC_5~ tag. Change 5 to something else based on the depth that you need for the table of contents.
    1. To add a TOC tag, you can use the command ~org-set-tags-command~ (C-c C-q)
    1. Enter TOC

***** org-roam

Prerequisites: Install Graphviz for the Linux distribution

#+begin_src emacs-lisp
   (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Downloads/GitRepositories/my-personal-wiki"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n g" . org-roam-graph)
	   ("C-c n i" . org-roam-node-insert)
	   ("C-c n c" . org-roam-capture)
	   ;; Dailies
	   ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
  )
#+end_src

~org-roam-node-find~ to create/insert a new node
~org-roam-node-insert~ to insert a node in another node
~org-roam-buffer-toggle~ to open backlinks buffer for a node

**** javascript packages

***** js-import

    #+begin_src emacs-lisp
      (use-package js-import
        :ensure t
      )
    #+end_src

***** rjsx-mode

    https://github.com/felipeochoa/rjsx-mode
    
    #+begin_src emacs-lisp
      (use-package rjsx-mode
        :ensure t
        :mode "\\.js\\'"
      )
    #+end_src

***** tide    

    prerequisite for tide: npm install -g typescript

    #+begin_src emacs-lisp
      (defun setup-tide-mode()
        "Setup function for tide."
        (interactive)
        (tide-setup)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automaticaly '(save mode-enabled))
        (tide-ho-identifier-mode +1)
        (company-mode +1)
      )
    #+end_src
    
    https://github.com/ananthakumaran/tide
    #+begin_src emacs-lisp
      (use-package tide
        :ensure t
        ;; :after (rjsx-mode company flycheck)
        :after (rjsx-mode company)
        :hook (rjsx-mode . setup-tide-mode)
        :config 
        (global-set-key (kbd "C-c jd") 'tide-jump-to-definition)
        (global-set-key (kbd "C-c jb") 'tide-jump-back)
      )
    #+end_src
